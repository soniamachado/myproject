paises =[]

with open('/home/sonia_machado/myproject/python/samples.txt', 'r') as f:
    for linha in f:
        linha = linha.strip()  # remover espa√ßos e \n no fim
        if not linha:
            continue  # salta linhas vazias

        lista_campos = linha.split()  # dividir por espa√ßos/tabs se a linha for "Afghanistan;+93", ent√£o a lista_campos ser√° ['Afghanistan', '+93']
        paises.append(lista_campos[0])  # guardar o nome do pa√≠s (primeiro campo)

        if lista_campos[0] == 'Afghanistan':
            print('Pa√≠s:', lista_campos[0])
            print('Indicativo:', lista_campos[1])

# ordenar lista de pa√≠ses
print('Pa√≠ses ordenados alfabeticamente:')
paises.sort()
print(paises)
'''ficheiro1.txt
Afghanistan;+93
Portugal;+351
Brazil;+55
Spain;+34

a sa√≠da ser√°:
Pa√≠s: Afghanistan
Indicativo: +93
Pa√≠ses ordenados alfabeticamente:
['Afghanistan', 'Brazil', 'Portugal', 'Spain']'''
#quando copiaste o ficheiro para a pasta do reposit√≥rio, aparecem dois ficheiros, o ficheiro que tu queres-samples.txt e o samples.txt~ que √© uma c√≥pia de seguran√ßa que o editor faz automaticamente. Se quiseres apagar esse ficheiro, podes apag√°-lo sem problemas.
#isto √© um alternate data stream(ADS) criado pelo windows.
'''EXPLICA√á√ÉO No Windows, quando descarregas/copias ficheiros da Internet, o sistema cria esse Zone.Identifier para marcar que o ficheiro veio da Internet.
√â uma "marca de seguran√ßa" usada pelo Windows SmartScreen e pelo Internet Explorer/Edge.
N√£o √© c√≥digo, √© s√≥ metadados.

O que √© a pasta __pycache__/

√â uma pasta criada automaticamente pelo Python.

Sempre que corres um ficheiro Python (.py), o Python compila-o para um formato mais r√°pido (.pyc) e guarda dentro de __pycache__/.

Tu n√£o precisas criar nem apagar ‚Üí o Python trata disso sozinho.

Exemplo:

meu_script.py
__pycache__/
   ‚îî‚îÄ‚îÄ meu_script.cpython-311.pyc
üìå Porque aparece numa pasta e noutra n√£o?
Se corres python meu_script.py ‚Üí o Python normalmente cria o __pycache__/.
Mas pode n√£o aparecer se:
O c√≥digo √© muito pequeno/simples (Python decide n√£o guardar .pyc).
O ambiente tem a cache desativada (com a vari√°vel de ambiente PYTHONDONTWRITEBYTECODE=1).
Usaste uma IDE (tipo VS Code ou PyCharm) que executa em modo sem cache.
J√° apagaste manualmente.
Ou seja: n√£o √© obrigat√≥rio aparecer sempre.


O que o .gitignore faz

Se criares um ficheiro/pasta que esteja listado no .gitignore, o Git finge que n√£o existe.

Ou seja, n√£o aparece no git status, n√£o vai para git add, nem para commits.

Mas o ficheiro continua no teu disco normalmente.
'''